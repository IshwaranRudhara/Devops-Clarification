#Networking Basics

sudo yum install net-tools

ifconfig

#List all Docker network commands:

docker network -h

#List all Docker networks on the host:

docker network ls
docker network ls --no-trunc

#Getting detailed info on a network:

docker network inspect [NAME]
Creating a network:

docker network create br00

#Deleting a network:

docker network rm [NAME]

#Remove all unused networks:

docker network prune

#Adding and Removing containers to a network
#Create a container with no network:

docker container run -d --name network-test03 -p 8081:80 nginx

#Create a new network:

docker network create br01

#Add the container to the bridge network:

docker network connect br01 network-test03

#Inspect network-test03 to see the networks:

docker container inspect network-test03

#Remove network-test03 from br01:

docker network disconnect br01 network-test03

#Create a bridge network with a subnet and gateway:

docker network create --subnet 10.1.0.0/24 --gateway 10.1.0.1 br02

#Run ifconfig to view the bridge interface for br02:

ifconfig

#Inspect the br02 network:

docker network inspect br02

#Prune all unused networks:

docker network prune
#Create a network with an IP range:

docker network create --subnet 10.1.0.0/16 --gateway 10.1.0.1 \
--ip-range=10.1.4.0/24 --driver=bridge --label=host4network br04

#Inspect the br04 network:

docker network inspect br04

#Create a container using the br04 network:

docker container run --name network-test01 -it --network br04 centos /bin/bash

#Install Net Tools:

yum update -y
yum install -y net-tools

#Get the IP info for the container:

ifconfig

#Get the gateway info the container:

netstat -rn

#Get the DNS info for the container:

cat /etc/resolv.conf
#Assigning IPs to a container:
#Create a new container and assign an IP to it:

docker container run -d --name network-test02 --ip 10.1.4.102 --network br04 nginx

#Get the IP info for the container:

docker container inspect network-test02 | grep IPAddr

#Inspect network-test03 to see that br01 was removed:

docker container inspect network-test04
Networking two containers

#Create an internal network:

docker network create -d bridge --internal localhost

#Create a MySQL container that is connected to localhost:

docker container run -d --name test_mysql \
-e MYSQL_ROOT_PASSWORD=P4sSw0rd0 \
--network localhost mysql:5.7

#Create a container that can ping the MySQL container:

docker container run -it --name ping-mysql \
--network bridge \
centos

#Connect ping-mysql to the localhost network:

docker network connect localhost ping-mysql

#Restart and attach to container:

docker container start -ia ping-mysql

#Create a container that can't ping the MySQL container:

docker container run -it --name cant-ping-mysql \
centos

#Create a Nginx container that is not publicly accessible:

docker container run -d --name private-nginx -p 8081:80 --network localhost nginx

#Inspect private-nginx:

docker container inspect private-nginx
------------------------------------
docker logs -f <container_name>

docker build -t demo:1 -f sample/Dockerfile4 --build-arg user=pandian --build-arg httpd_package=httpd saple-images/ 

du -shc *

vi .dockerignore

**********************************************
#FROM nginx:alpine

#RUN echo "HIPPO" >> /usr/share/nginx/html/test.html

#RUN echo "AZCS" >> /usr/share/nginx/html/test.html

-------------------------------------------------
System Information Commands
uname -a				shows Linux system info
uname -r				shows kernel release info
cat /etc/redhat-release	shows installed redhat version
uptime					displays system running/life time

docker run -itd -v /mnt --name test centos
docker rm -fv test
docker run -itd -v /mnt --name test centos
docker rm -f test
docker volume ls
docker volume ls -f=dangling=true
docker volume rm $(docker volume ls -f=dangling=true)

##mkdir mongo

docker run -d --name mongo -v /mnt/mongo/:/data/db -p 27017:27017

docker run -d --name jenkins -p 8800:8080 -v /mnt/jenkins:/var/jenkins_home jenkins/jenkins
docker run -d --name jenkins -p 8900:8080 -v /mnt/jenkins:/var/jenkins_home jenkins/jenkins
#docker logs -f <conter_id>
## docker run --rm -it jenkins/jenkins bash

##/mnt/jenkins
##sudo chown 1000:1000 -R jenkins


-----------------------------
docker run --name apache -d -p 8080:80 httpd

docker exec -it <continer_id> bash
	cd htdocs-> cat index.html
	
in docker host machine create a file demo.html with [this file was copied from host to running container] 
	
docker cp demo.html <container_name>:/usr/local/apache2(cotainer_name)htdocs/index.html 

#FROM nginx:alpine

#RUN \
#  echo "HIPPO" >> /usr/share/nginx/html/test.html && \

#  echo "AZCS" >> /usr/share/nginx/html/test.html


FROM nginx:alpine

ENV webfile /usr/share/nginx/html/test.html

RUN \
  echo "HIPPO" >> $webfile && \
  echo "AZCS" >> $webfile

docker build -t demo:v1 -f Dockerfile1 .

docker run -d -p 9090:80 demo:v1
------------------------

FROM centos:7

RUN yum -y install httpd  php php-mysql

COPY html-ssl /var/www/html

RUN echo "<?php phpinfo(); ?>" >/var/www/html/info.php

CMD apachectl -DFOREGROUND

# docker build -t php:1 .
# docker run -d -p 9090:880 --name demo_ssl php:1 
----------------------------------

https://docs.docker.com/compose/install/

version: '3'
services:
  demo_web:
    containername: nginx_sample
	ports: "9700:80"
	image: ngix:alpine
	  
volumes:
networks:
